[build-system]
requires = ["setuptools>=63", "setuptools_scm[toml]>=6.2", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vtsserving"
description = "VtsServing: The Unified Model Serving Framework"
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.7"
keywords = ["MLOps", "AI", "VtsServing", "Model Serving", "Model Deployment"]
license = { text = "Apache-2.0" }
authors = [{ name = "VtsServing Team", email = "contact@vtsserving.com" }]
classifiers = [
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Software Development :: Libraries",
]
dependencies = [
  "Jinja2>=3.0.1",
  "PyYAML>=5.0",
  "aiohttp",
  "attrs>=21.1.0",
  "cattrs>=22.1.0",
  "circus>=0.17.0,!=0.17.2",
  "click>=7.0",
  "click-option-group",
  "cloudpickle",
  "deepmerge",
  "fs",
  "numpy",
  # OpenTelemetry is the server dependencies, rather than SDK
  # Since there are discrepancies among API and instrumentation packages,
  # we should always pin the set version of Opentelemetry suite
  "opentelemetry-api==1.14.0",
  "opentelemetry-sdk==1.14.0",
  "opentelemetry-exporter-otlp-proto-http==1.14.0",
  "opentelemetry-instrumentation==0.35b0",
  "opentelemetry-instrumentation-aiohttp-client==0.35b0",
  "opentelemetry-instrumentation-asgi==0.35b0",
  "opentelemetry-semantic-conventions==0.35b0",
  "opentelemetry-util-http==0.35b0",
  "packaging>=20.0",
  "pathspec",
  "pip-tools>=6.6.2",
  "pip-requirements-parser>=31.2.0",
  "prometheus-client>=0.10.0",
  "psutil",
  "pynvml<12",
  "python-dateutil",
  "python-multipart",
  "python-json-logger",
  "requests",
  "rich>=11.2.0",
  "schema",
  "simple-di>=0.1.4",
  "starlette",
  "uvicorn",
  "watchfiles>=0.15.0",
  "backports.cached-property;python_version<'3.8'",
  "backports.shutil_copytree;python_version<'3.8'",
  "importlib-metadata;python_version<'3.8'",
  "singledispatchmethod;python_version<'3.8'",
]
dynamic = ["version"]

[project.urls]
"Documentation" = "https://docs.vtsserving.org/en/latest/"
"Bug Reports" = "https://github.com/vtsserving/VtsServing/issues"
"VtsServing Community Slack" = "https://bit.ly/2N5IpbB"
"VtsServing Official Blog" = "https://modelserving.com"
"VtsServing Twitter" = "https://twitter.com/vtsservingai"

[project.scripts]
vtsserving = "vtsserving_cli.cli:cli"

[tool.setuptools.package-data]
vtsserving = ["vtsserving/*"]
vtsserving_cli = ["vtsserving_cli/*"]

[tool.setuptools.exclude-package-data]
"*" = [
  ".git*",
  ".bazel*",
  "BUILD.bazel",
  "WORKSPACE",
  "*.md",
  "Makefile",
  "*.py[cod]",
  "typings",
]
vtsserving = ["grpc/buf.yaml", "_internal/frameworks/FRAMEWORK_TEMPLATE_PY"]
vtsserving_cli = ["worker/README.md"]

[tool.setuptools.packages.find]
where = ["src"]
include = [
  # include vtsserving packages
  "vtsserving",
  "vtsserving.grpc*",
  "vtsserving.testing*",
  "vtsserving._internal*",
  # include vtsserving_cli packages
  "vtsserving_cli",
  "vtsserving_cli.worker",
]

[project.optional-dependencies]
all = [
  "vtsserving[aws]",
  "vtsserving[io]",
  "vtsserving[grpc]",
  "vtsserving[grpc-reflection]",
  "vtsserving[grpc-channelz]",
  "vtsserving[tracing]",
]
aws = ["fs-s3fs"]
io = [
  "vtsserving[io-json]",
  "vtsserving[io-image]",
  "vtsserving[io-pandas]",
  "vtsserving[io-file]",
] # syntatic sugar for vtsserving[io-json,io-image,io-pandas,io-file]
io-file = ["filetype"] # Currently use for from_sample
io-json = ["pydantic<2"] # currently we don't have support for pydantic 2.0
io-image = ["vtsserving[io-file]", "Pillow"]
io-pandas = ["pandas", "pyarrow"]
grpc = [
  # Restrict maximum version due to breaking protobuf 4.21.0 changes
  # (see https://github.com/protocolbuffers/protobuf/issues/10051)
  # 3.19.5 is currently breaking on a lot of system.
  "protobuf>=3.5.0, <3.20, !=3.19.5",
  # Lowest version that support 3.10. We need to set an upper bound
  # We can't use 1.48.2 since it depends on 3.19.5
  "grpcio>=1.41.0,!=1.48.2",
  # grpcio>=1.48.0 provides a pre-built M1 wheel.
  "grpcio>=1.48.0,!=1.48.2;platform_machine=='arm64' and platform_system=='Darwin'",
  "grpcio-health-checking>=1.41.0,!=1.48.2",
  "opentelemetry-instrumentation-grpc==0.35b0",
]
grpc-reflection = ["vtsserving[grpc]", "grpcio-reflection>=1.41.0,!=1.48.2"]
grpc-channelz = ["vtsserving[grpc]", "grpcio-channelz>=1.41.0,!=1.48.2"]
# We kept for compatibility with previous
# versions of VtsServing. It is discouraged to use this, instead use any
# of the above tracing.* extras.
tracing = [
  "vtsserving[tracing-jaeger]",
  "vtsserving[tracing-otlp]",
  "vtsserving[tracing-zipkin]",
]
tracing-jaeger = ["opentelemetry-exporter-jaeger==1.14.0"]
tracing-zipkin = ["opentelemetry-exporter-zipkin==1.14.0"]
tracing-otlp = ["opentelemetry-exporter-otlp==1.14.0"]

[tool.setuptools_scm]
write_to = "src/vtsserving/_version.py"
git_describe_command = "git describe --dirty --tags --long --first-parent"
version_scheme = "post-release"
fallback_version = "0.0.0"

[tool.coverage.paths]
source = ["src"]

[tool.coverage.run]
branch = true
parallel = true
source = ["src/vtsserving/"]
omit = [
  "src/vtsserving/__main__.py",
  "src/vtsserving/io.py",
  "src/vtsserving/serve.py",
  "src/vtsserving/start.py",
  "src/vtsserving/_internal/types.py",
  "src/vtsserving/testing/*",
  "src/vtsserving/grpc/v1alpha1/*",
  "src/vtsserving/grpc/v1/*",
  "src/vtsserving/_internal/external_typing/*",
  "src/vtsserving/_internal/yatai_client/*",
  "src/vtsserving/_internal/yatai_rest_api_client/*",
]

[tool.coverage.report]
show_missing = true
precision = 2
omit = [
  'src/vtsserving/__main__.py',
  "src/vtsserving/io.py",
  "src/vtsserving/serve.py",
  "src/vtsserving/start.py",
  "src/vtsserving/_internal/types.py",
  "src/vtsserving/testing/*",
  "src/vtsserving/grpc/v1alpha1/*",
  "src/vtsserving/grpc/v1/*",
  "src/vtsserving/_internal/external_typing/*",
  "src/vtsserving/_internal/yatai_client/*",
  "src/vtsserving/_internal/yatai_rest_api_client/*",
]
exclude_lines = [
  "\\#\\s*pragma: no cover",
  "^\\s*def __repr__",
  "^\\s*raise AssertionError",
  "^\\s*raise NotImplementedError",
  "^\\s*raise MissingDependencyException",
  "^\\s*except ImportError",
  "if __name__ == .__main__.:",
  "^\\s*if TYPE_CHECKING:",
  "^\\s*@(t\\.)?overload( |$)",
  "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.tox
    | \.venv
    | _build
    | .build
    | bazel-*
    | build
    | venv
    | lib
    | dist
    | typings
    | src/vtsserving/grpc/v1alpha1
    | src/vtsserving/grpc/v1
    | tests/proto
    | grpc-client/thirdparty
    | grpc-client/vtsserving
  )/
  | src/vtsserving/_version.py
)
'''

[tool.pytest.ini_options]
addopts = ["-rfEX", "-pvtsserving.testing.pytest.plugin"]
python_files = ["test_*.py", "*_test.py"]
testpaths = ["tests"]

[tool.pylint.main]
recursive = true
extension-pkg-allow-list = [
  "numpy",
  "tensorflow",
  "torch",
  "paddle",
  "onnxruntime",
  "onnx",
  "pydantic.schema",
]
ignore-paths = [
  "src/vtsserving/_internal/external_typing",
  "src/vtsserving/grpc/v1alpha1",
  "src/vtsserving/grpc/v1",
]
disable = ["coerce-builtin", "no-absolute-import", "C", "R"]
enable = ["c-extension-no-member"]
evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
msg-template = "{msg_id}:{symbol} [{line:0>3d}:{column:0>2d}] {obj}: {msg}"
output-format = "colorized"
score = true

[tool.pylint.classes]
valid-metaclass-classmethod-first-arg = ["cls", "mcls", "kls"]

[tool.pylint.logging]
logging-format-style = "old" # using %s formatter for logging (performance-related)

[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO", "NOTE", "WARNING"]

[tool.pylint.refactoring]
# specify functions that should not return
never-returning-functions = ["sys.exit"]

[tool.pylint.spelling]
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:,pylint:,type:"

[tool.pylint.variables]
init-import = true

[tool.pylint.typecheck]
contextmanager-decorators = [
  "contextlib.contextmanager",
  "vtsserving._internal.utils.cached_contextmanager",
]

[tool.isort]
profile = "black"
line_length = 88
length_sort = true
force_single_line = true
order_by_type = true
known_first_party = "vtsserving"
force_alphabetical_sort_within_sections = true
skip_glob = [
  "typings/*",
  "test/*",
  "**/*_pb2.py*",
  "**/*_pb2_grpc.py*",
  "venv/*",
  "lib/*",
  "grpc-client/thirdparty",
  "grpc-client/vtsserving",
  "bazel-*",
]

[tool.pyright]
pythonVersion = "3.10"
include = ["src/", "examples/", "tests/"]
exclude = [
  'src/vtsserving/_version.py',
  'src/vtsserving/__main__.py',
  'src/vtsserving/_internal/external_typing/',
  'src/**/*_pb2.py*',
  "src/**/*_pb2_grpc.py*",
  "grpc-client/thirdparty",
  "test/proto",
  "bazel-*",
]
analysis.useLibraryCodeForTypes = true
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
strictParameterNoneValue = true
enableTypeIgnoreComments = true
reportGeneralTypeIssues = "error"
reportPropertyTypeMismatch = "error"
reportFunctionMemberAccess = "error"
reportMissingImports = "warning"
reportMissingModuleSource = "warning"
reportMissingTypeStubs = "warning"
reportUnusedImport = "error"
reportUnusedClass = "error"
reportUnusedFunction = "error"
reportUnusedVariable = "error"
reportDuplicateImport = "error"
reportWildcardImportFromLibrary = "error"
reportOptionalSubscript = "error"
reportOptionalMemberAccess = "error"
reportOptionalCall = "error"
reportOptionalIterable = "error"
reportOptionalContextManager = "error"
reportOptionalOperand = "error"
reportTypedDictNotRequiredAccess = "error"
reportUntypedFunctionDecorator = "error"
reportUntypedClassDecorator = "error"
reportUntypedBaseClass = "error"
reportUntypedNamedTuple = "error"
reportPrivateUsage = "error"
reportPrivateImportUsage = "error"
reportConstantRedefinition = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportOverlappingOverload = "error"
reportUninitializedInstanceVariable = "none"
reportInvalidStringEscapeSequence = "error"
reportUnknownParameterType = "error"
reportUnknownArgumentType = "error"
reportUnknownLambdaType = "error"
reportUnknownVariableType = "error"
reportUnknownMemberType = "warning"
reportMissingParameterType = "error"
reportMissingTypeArgument = "error"
reportInvalidTypeVarUse = "error"
reportCallInDefaultInitializer = "none"
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "error"
reportAssertAlwaysTrue = "error"
reportSelfClsParameterName = "error"
reportImplicitStringConcatenation = "none"
reportUndefinedVariable = "error"
reportUnboundVariable = "error"
reportInvalidStubStatement = "error"
reportIncompleteStub = "error"
reportUnsupportedDunderAll = "error"
reportUnusedCallResult = "none"
reportUnusedCoroutine = "error"
